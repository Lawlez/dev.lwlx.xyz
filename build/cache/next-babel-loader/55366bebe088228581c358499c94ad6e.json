{"ast":null,"code":"import matter from 'gray-matter';\nimport glob from 'glob';\nimport { globals } from './globals';\nexport const loadMarkdownFile = async path => {\n  const mdFile = await import(`./md/${path}`);\n  return {\n    path,\n    contents: mdFile.default\n  };\n};\nexport const mdToPost = file => {\n  const metadata = matter(file.contents);\n  const path = file.path.replace('.md', '');\n  const post = {\n    path,\n    title: metadata.data.title,\n    subtitle: metadata.data.subtitle || null,\n    published: metadata.data.published || false,\n    datePublished: metadata.data.datePublished || null,\n    tags: metadata.data.tags || null,\n    description: metadata.data.description || null,\n    canonicalUrl: metadata.data.canonicalUrl || `${globals.url}/${path}`,\n    author: metadata.data.author || null,\n    authorPhoto: metadata.data.authorPhoto || null,\n    authorTwitter: metadata.data.authorTwitter || null,\n    bannerPhoto: metadata.data.bannerPhoto || null,\n    thumbnailPhoto: metadata.data.thumbnailPhoto || null,\n    content: metadata.content\n  };\n  if (!post.title) throw new Error(`Missing required field: title.`);\n  if (!post.content) throw new Error(`Missing required field: content.`);\n  if (!post.datePublished) throw new Error(`Missing required field: datePublished.`);\n  return post;\n};\nexport const loadMarkdownFiles = async path => {\n  const blogPaths = glob.sync(`./md/${path}`);\n  const postDataList = await Promise.all(blogPaths.map(blogPath => {\n    const modPath = blogPath.slice(blogPath.indexOf(`md/`) + 3);\n    return loadMarkdownFile(`${modPath}`);\n  }));\n  return postDataList;\n};\nexport const loadPost = async path => {\n  const file = await loadMarkdownFile(path);\n  return mdToPost(file);\n};\nexport const loadBlogPosts = async () => {\n  return await loadMarkdownFiles(`blog/*.md`).then(md => md.map(mdToPost).filter(p => p.published).sort((a, b) => (b.datePublished || 0) - (a.datePublished || 0)));\n};","map":{"version":3,"sources":["/Users/lwlx/Desktop/PROJECTS/dev.lwlx.xyz/loader.ts"],"names":["matter","glob","globals","loadMarkdownFile","path","mdFile","contents","default","mdToPost","file","metadata","replace","post","title","data","subtitle","published","datePublished","tags","description","canonicalUrl","url","author","authorPhoto","authorTwitter","bannerPhoto","thumbnailPhoto","content","Error","loadMarkdownFiles","blogPaths","sync","postDataList","Promise","all","map","blogPath","modPath","slice","indexOf","loadPost","loadBlogPosts","then","md","filter","p","sort","a","b"],"mappings":"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","sourcesContent":["import matter from 'gray-matter';\nimport glob from 'glob';\nimport { globals } from './globals';\n\nexport type PostData = {\n  path: string;\n  title: string;\n  subtitle?: string;\n  content: string;\n  description?: string;\n  canonicalUrl?: string;\n  published: boolean;\n  datePublished: number;\n  author?: string;\n  authorPhoto?: string;\n  authorTwitter?: string;\n  tags?: string[];\n  bannerPhoto?: string;\n  thumbnailPhoto?: string;\n};\n\ntype RawFile = { path: string; contents: string };\n\nexport const loadMarkdownFile = async (path: string): Promise<RawFile> => {\n  const mdFile = await import(`./md/${path}`);\n  return { path, contents: mdFile.default };\n};\n\nexport const mdToPost = (file: RawFile): PostData => {\n  const metadata = matter(file.contents);\n  const path = file.path.replace('.md', '');\n  const post = {\n    path,\n    title: metadata.data.title,\n    subtitle: metadata.data.subtitle || null,\n    published: metadata.data.published || false,\n    datePublished: metadata.data.datePublished || null,\n    tags: metadata.data.tags || null,\n    description: metadata.data.description || null,\n    canonicalUrl: metadata.data.canonicalUrl || `${globals.url}/${path}`,\n    author: metadata.data.author || null,\n    authorPhoto: metadata.data.authorPhoto || null,\n    authorTwitter: metadata.data.authorTwitter || null,\n    bannerPhoto: metadata.data.bannerPhoto || null,\n    thumbnailPhoto: metadata.data.thumbnailPhoto || null,\n    content: metadata.content,\n  };\n\n  if (!post.title)\n    throw new Error(`Missing required field: title.`);\n\n  if (!post.content)\n    throw new Error(`Missing required field: content.`);\n\n  if (!post.datePublished)\n    throw new Error(`Missing required field: datePublished.`);\n\n  return post as PostData;\n};\n\nexport const loadMarkdownFiles = async (path: string) => {\n  const blogPaths = glob.sync(`./md/${path}`);\n  const postDataList = await Promise.all(\n    blogPaths.map((blogPath) => {\n      const modPath = blogPath.slice(blogPath.indexOf(`md/`) + 3);\n      return loadMarkdownFile(`${modPath}`);\n    })\n  );\n  return postDataList;\n};\n\nexport const loadPost = async (path: string): Promise<PostData> => {\n  const file = await loadMarkdownFile(path);\n  return mdToPost(file);\n};\n\nexport const loadBlogPosts = async (): Promise<PostData[]> => {\n  return await loadMarkdownFiles(`blog/*.md`)\n  .then( md => md.map(mdToPost)\n    .filter((p) => p.published)\n    .sort((a, b) => (b.datePublished || 0) - (a.datePublished || 0)) )\n};\n"]},"metadata":{},"sourceType":"module"}