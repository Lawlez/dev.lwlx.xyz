{"ast":null,"code":"import RSS from 'rss';\nimport fs from 'fs';\nimport showdown from 'showdown';\nimport { globals } from './globals';\nexport const generateRSS = async posts => {\n  posts.map(post => {\n    if (!post.canonicalUrl) throw new Error(\"Missing canonicalUrl. A canonical URL is required for RSS feed generation. If you don't care about RSS, uncomment `generateRSS(posts)` at the bottom of index.tsx.\");\n    return post;\n  });\n  const feed = new RSS({\n    title: globals.siteName,\n    description: globals.siteDescription,\n    feed_url: `${globals.url}/rss.xml`,\n    site_url: globals.url,\n    image_url: `${globals.url}/icon.png`,\n    managingEditor: globals.email,\n    webMaster: globals.email,\n    copyright: `${new Date().getFullYear()} ${globals.yourName}`,\n    language: 'en',\n    pubDate: globals.siteCreationDate,\n    ttl: 60\n  });\n  let isValid = true;\n\n  for (const post of posts) {\n    const converter = new showdown.Converter();\n    const html = converter.makeHtml(post.content);\n\n    if (!post.datePublished) {\n      isValid = false;\n      console.warn('All posts must have a publishedDate timestamp when generating RSS feed.');\n      console.warn('Not generating rss.xml.');\n    }\n\n    feed.item({\n      title: post.title,\n      description: html,\n      url: `https://dev.lwlx.xyz/blog/${post.path}`,\n      categories: post.tags || [],\n      author: post.author || 'Dominik Feger',\n      date: new Date(post.datePublished || 0).toISOString()\n    });\n  }\n\n  if (!isValid) return; // writes RSS.xml to public directory\n\n  const path = `${process.cwd()}/public/rss.xml`;\n  fs.writeFileSync(path, feed.xml(), 'utf8');\n  console.log(`generated RSS feed`);\n};","map":{"version":3,"sources":["/Users/lwlx/Desktop/PROJECTS/dev.lwlx.xyz/rssUtil.ts"],"names":["RSS","fs","showdown","globals","generateRSS","posts","map","post","canonicalUrl","Error","feed","title","siteName","description","siteDescription","feed_url","url","site_url","image_url","managingEditor","email","webMaster","copyright","Date","getFullYear","yourName","language","pubDate","siteCreationDate","ttl","isValid","converter","Converter","html","makeHtml","content","datePublished","console","warn","item","path","categories","tags","author","date","toISOString","process","cwd","writeFileSync","xml","log"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,OAAT,QAAwB,WAAxB;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAOC,KAAP,IAA6B;AACtDA,EAAAA,KAAK,CAACC,GAAN,CAAWC,IAAD,IAAU;AAClB,QAAI,CAACA,IAAI,CAACC,YAAV,EACE,MAAM,IAAIC,KAAJ,CACJ,oKADI,CAAN;AAGF,WAAOF,IAAP;AACD,GAND;AAQA,QAAMG,IAAI,GAAG,IAAIV,GAAJ,CAAQ;AACnBW,IAAAA,KAAK,EAAER,OAAO,CAACS,QADI;AAEnBC,IAAAA,WAAW,EAAEV,OAAO,CAACW,eAFF;AAGnBC,IAAAA,QAAQ,EAAG,GAAEZ,OAAO,CAACa,GAAI,UAHN;AAInBC,IAAAA,QAAQ,EAAEd,OAAO,CAACa,GAJC;AAKnBE,IAAAA,SAAS,EAAG,GAAEf,OAAO,CAACa,GAAI,WALP;AAMnBG,IAAAA,cAAc,EAAEhB,OAAO,CAACiB,KANL;AAOnBC,IAAAA,SAAS,EAAElB,OAAO,CAACiB,KAPA;AAQnBE,IAAAA,SAAS,EAAG,GAAE,IAAIC,IAAJ,GAAWC,WAAX,EAAyB,IAAGrB,OAAO,CAACsB,QAAS,EARxC;AASnBC,IAAAA,QAAQ,EAAE,IATS;AAUnBC,IAAAA,OAAO,EAAExB,OAAO,CAACyB,gBAVE;AAWnBC,IAAAA,GAAG,EAAE;AAXc,GAAR,CAAb;AAcA,MAAIC,OAAO,GAAG,IAAd;;AACA,OAAK,MAAMvB,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,UAAM0B,SAAS,GAAG,IAAI7B,QAAQ,CAAC8B,SAAb,EAAlB;AACA,UAAMC,IAAI,GAAGF,SAAS,CAACG,QAAV,CAAmB3B,IAAI,CAAC4B,OAAxB,CAAb;;AACA,QAAI,CAAC5B,IAAI,CAAC6B,aAAV,EAAyB;AACvBN,MAAAA,OAAO,GAAG,KAAV;AACAO,MAAAA,OAAO,CAACC,IAAR,CACE,yEADF;AAGAD,MAAAA,OAAO,CAACC,IAAR,CAAa,yBAAb;AACD;;AACD5B,IAAAA,IAAI,CAAC6B,IAAL,CAAU;AACR5B,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KADJ;AAERE,MAAAA,WAAW,EAAEoB,IAFL;AAGRjB,MAAAA,GAAG,EAAG,6BAA4BT,IAAI,CAACiC,IAAK,EAHpC;AAIRC,MAAAA,UAAU,EAAElC,IAAI,CAACmC,IAAL,IAAa,EAJjB;AAKRC,MAAAA,MAAM,EAAEpC,IAAI,CAACoC,MAAL,IAAe,eALf;AAMRC,MAAAA,IAAI,EAAE,IAAIrB,IAAJ,CAAShB,IAAI,CAAC6B,aAAL,IAAsB,CAA/B,EAAkCS,WAAlC;AANE,KAAV;AAQD;;AAED,MAAI,CAACf,OAAL,EAAc,OA5CwC,CA8CtD;;AACA,QAAMU,IAAI,GAAI,GAAEM,OAAO,CAACC,GAAR,EAAc,iBAA9B;AACA9C,EAAAA,EAAE,CAAC+C,aAAH,CAAiBR,IAAjB,EAAuB9B,IAAI,CAACuC,GAAL,EAAvB,EAAmC,MAAnC;AACAZ,EAAAA,OAAO,CAACa,GAAR,CAAa,oBAAb;AACD,CAlDM","sourcesContent":["import RSS from 'rss';\nimport fs from 'fs';\nimport showdown from 'showdown';\nimport { globals } from './globals';\nimport { PostData } from './loader';\n\nexport const generateRSS = async (posts: PostData[]) => {\n  posts.map((post) => {\n    if (!post.canonicalUrl)\n      throw new Error(\n        \"Missing canonicalUrl. A canonical URL is required for RSS feed generation. If you don't care about RSS, uncomment `generateRSS(posts)` at the bottom of index.tsx.\"\n      );\n    return post;\n  });\n\n  const feed = new RSS({\n    title: globals.siteName,\n    description: globals.siteDescription,\n    feed_url: `${globals.url}/rss.xml`,\n    site_url: globals.url,\n    image_url: `${globals.url}/icon.png`,\n    managingEditor: globals.email,\n    webMaster: globals.email,\n    copyright: `${new Date().getFullYear()} ${globals.yourName}`,\n    language: 'en',\n    pubDate: globals.siteCreationDate,\n    ttl: 60,\n  });\n\n  let isValid = true;\n  for (const post of posts) {\n    const converter = new showdown.Converter();\n    const html = converter.makeHtml(post.content);\n    if (!post.datePublished) {\n      isValid = false;\n      console.warn(\n        'All posts must have a publishedDate timestamp when generating RSS feed.'\n      );\n      console.warn('Not generating rss.xml.');\n    }\n    feed.item({\n      title: post.title,\n      description: html,\n      url: `https://dev.lwlx.xyz/blog/${post.path}`,\n      categories: post.tags || [],\n      author: post.author || 'Dominik Feger',\n      date: new Date(post.datePublished || 0).toISOString(),\n    });\n  }\n\n  if (!isValid) return;\n\n  // writes RSS.xml to public directory\n  const path = `${process.cwd()}/public/rss.xml`;\n  fs.writeFileSync(path, feed.xml(), 'utf8');\n  console.log(`generated RSS feed`);\n};\n"]},"metadata":{},"sourceType":"module"}