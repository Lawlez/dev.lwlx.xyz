{"pageProps":{"post":{"path":"blog/features","title":"Getting consistent Encryption in Node / PHP / Browser and openSSL","subtitle":null,"published":false,"datePublished":1603967203286,"tags":["encryption","decryption","openssl","nodejs","php"],"description":null,"canonicalUrl":"https://dev.lwlx.xyz/","author":"lwlx","authorPhoto":"/profile.jpg","authorTwitter":"0x0000005","bannerPhoto":"/crypto.jpg","thumbnailPhoto":"/crypto_thumb.jpg","content":"\nIt may not look like much, but dev.lwlx.xyz does a lot out of the box.\n\n**Markdown loading and rendering**: Using Next.js dynamic imports, you can load Markdown files and pass them into your Next.js pages as props. Easy peasy.\n\n**TypeScript + React**: Markdown is great for text-heavy, non-interactive content. For everything else, you'll want something a little more expressive. dev.lwlx.xyz makes it easy to mix Markdown and React on the same page. Just load your Markdown files with dynamic imports, pass it into your component as a prop, and render it with the `Markdown.tsx` component.\n\n**Built-in support for blogs**: dev.lwlx.xyz provides a utility for parsing Markdown blog posts with frontmatter metadata into a structured TypeScript object. Supported tags include: `title`, `subtitle`, `datePublished`, `tags`, `description`, `canonicalUrl`, `author`, `authorPhoto`, `authorTwitter`, `bannerPhoto`, and `thumbnailPhoto`\n\n**Medium-inspired styles**: The Markdown components (`Markdown.tsx`) contains default styles inspired by Medium.\n\n**Google Analytics**: Just add your Google Analytics ID (e.g. 'UA-999999999-1') to `globals.ts` and the appropriate snippet will be automatically added to every page.\n\n**RSS feed generation**: An RSS feed is auto-generated from your blog post feed.\n\n**SEO best practices**: Every blog post page automatically populated meta tags based on the post metadata. This includes a `title` tag, `meta` tags, `og:` tags, Twitter metadata, and a `link` tag containing the canonical URL.\n\n**GitHub-style code blocks**: with syntax highlighting powered by [react-syntax-highlighter](https://github.com/conorhastings/react-syntax-highlighter). Works out-of-the-box for all programming languages. Just use Markdown's triple backtick syntax with a \"language identifier\", [just like GitHub](https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks).\n\n**Static generation**: you can generate a fully static version of your site using `yarn build && yarn export`. Powered by Next.js.\n\n**Zero magic**: You can view and modify every aspect of the site. If you're looking for a starting point, start modifying `index.tsx` (the home page), `BlogPost.tsx` (the blog post template), and `Markdown.tsx` (the Markdown component). And of course you can add entirely new pages/components as well!\n"}},"__N_SSG":true}