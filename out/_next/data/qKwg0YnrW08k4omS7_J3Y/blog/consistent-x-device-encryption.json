{"pageProps":{"post":{"path":"blog/consistent-x-device-encryption","title":"Getting consistent Encryption in Node / PHP / Browser and openSSL","subtitle":null,"published":true,"datePublished":1603967203286,"tags":["encryption","decryption","openssl","nodejs","php"],"description":null,"canonicalUrl":"https://dev.lwlx.xyz/","author":"lwlx","authorPhoto":"/profile.jpg","authorTwitter":"InfoSecx0","bannerPhoto":"/crypto.jpg","thumbnailPhoto":"/crypto_thumb.jpg","content":"\nI recently set out to build my personal website — the one you're reading now, as it happens!\n\nSurprisingly, it was much harder than expected to put together a \"tech stack\" that met my criteria. My criteria are pretty straightforward; I would expect most React devs to have a similar list. Yet it was surprisingly hard to put all these pieces together.\n\nGiven the lack of a decent out-of-the-box solution, I worry that many developers are settling for static-site generators that place limits on the interactivity and flexibility of your website. We can do better.\n\n> Clone the repo here to get started with this setup: https://github.com/Lawlez/dev.lwlx.xyz\n\nLet's quickly run through my list of design goals:\n\n### Using Node JS Crypto module\n\nI want to build the site with React and TypeScript. I love them both wholeheartedly, I use them for my day job, and they're gonna be around for a long time. Plus writing untyped JS makes me feel dirty.\n\n```javascript\nconst crypto = require('crypto')\n\n/**********************************************************************\n*\n*        DECRYPTION MODULE FOR USE INSIDE NODE.JS                     *\n*\n***********************************************************************/\n\nconst encryption = (data = 'TestString {} Héllöüä') => {\n\n    const secretPhrase = crypto.randomBytes(16).toString('hex')\n    const salt = crypto.randomBytes(128 / 8).toString('hex')\n    //here we generate the key and give it back as a string, we use 100k iterations\n    //as suggested in best practices\n    //We can use the key multiple times to encrypt multiple things(-30GB), we just cant use\n    //the same initialization vector twice\n    //the key for aes-256 needs to be 256 bits which equals 32 bytes or 32 characters\n    const configKey = crypto.pbkdf2Sync(secretPhrase, salt, 100000, 32, 'sha256').toString('hex').substr(0, 32)\n    //create unique IV for each encryption, the key can be reused. IV needs to always be 16 bytes\n    const IV = crypto.randomBytes(16)\n\n    //create ciphers for each encryption using the shared key and the unuique IV\n    const projectConfigCipher = crypto.createCipheriv('aes-256-cbc', configKey, IV.toString('hex').substr(0,16)\n\n    //encripting the storage location using the prepared cipher\n    const encrypted = Buffer.concat([configStorageCipher.update(\n        'STORAGE', 'utf8'\n    ), configStorageCipher.final()]).toString('hex')\n\n\treturn encrypted\n\n}\n```\n\n### Using browserify-aes's node crypto like implementation inside the Browser\n\nIf it's obnoxious to write new blog posts, I won't do it. That's a regrettable law of the universe. Even writing blog posts with plain HTML — just a bunch of `<p>` tags in a div — is just annoying enough to bug me. The answer: Markdown of course!\n\n```javascript\nimport crypto from 'browserify-aes'\n\n/**********************************************************************\n*\n*        DECRYPTION MODULE FOR USE IN BROWSER DURING RUNTIME          *\n*\n***********************************************************************/\nconst decrypt = hash => {\n    const hash = hash.data\n    //get IV from input, make sure its no longer than 16 bytes\n    const IV = hash.IV\n\n    //ein neuer cipher wird vorbereitet, mittels aes256, unserem 256 bit KEY und dem config IV\n    const decipher = crypto.createDecipheriv(\n        'aes256',\n        process.env.APP_CONFIG_KEY.substr(0, 32),\n       IV,\n    )\n\n    //der hash wird nun decrypted mittels dem zuvor erstellten cipher\n    const decrypted = Buffer.concat([decipher.update(\n         Buffer.from(hash, 'hex'),\n     ), decipher.final()]).toString()\n\n   return JSON.parse(decrypted)\n}\n```\n\n### ENCRYPTION & DECRYPTION MODULE FOR PHP7+ USING OPENSSL\n\nAs much as I love the Jamstack, it doesn't cut it from an SEO perspective. Many blogs powered by a \"headless CMS\" require two round trips before rendering the blog content (one to fetch the static JS bundle and another to fetch the blog content from a CMS). This degrades page load speeds and user experience, which accordingly degrades your rankings on Google.\n\n```php\n/**********************************************************************\n*\n*        ENCRYPTION & DECRYPTION MODULE FOR PHP7+ USING OPENSSL       *\n*\n***********************************************************************/\n\nclass AESEncryption {\n\n\t//key length should be 256 bits for aes 256 this means we use a string with 32 bytes\n\tpublic static $key = \"5f08e0ec585393a8e2ca8f0a1a0ae752\";\n\n\t //iv length should be always be 128 bit / 16 bytes\n\tpublic static $iv = \"05d387e7f773035a\";\n\n\t // The AES uses a block size of sixteen octets (128 bits)\n\tpublic static $Method = 'AES-256-CBC';\n\n\t/**\n\t  * use the AES to encrypt plaintext data and return a base 64 string\n\t *\n\t * $key\n\t */\n\tpublic static function encrypt($cleartext,$key = ''){\n\n\t\t$key = empty($key) ? self::$key : $key;\n\n\t\t$encrypted = openssl_encrypt($cleartext, self::$Method, $key, OPENSSL_RAW_DATA, self::$iv);\n\n\t\treturn base64_encode($encrypted);\n\n\t}\n\n\t/**\n\t  * use the AES to decrypt a base 64 string into plaintext\n\t *\n\t * $key\n\t */\n\tpublic static function decrypt($encrypted,$key = ''){\n\n\t\t$key = empty($key) ? self::$key : $key;\n\n\t\t$encrypted = base64_decode($encrypted);\n\n\t\t$decrypted = openssl_decrypt($encrypted, self::$Method, $key, OPENSSL_RAW_DATA, self::$iv);\n\n\t\treturn trim($decrypted);\n\t}\n}\n```\n\n### Using openssl for use in CLI\n\nI describe my final architecture design below, along with my rationale for each choice. I distilled this setup into a website starter/boilerplate available here: https://github.com/Lawlez/dev.lwlx.xyz. Below, I allude to certain files/functions I implemented; to see the source code of these, just clone the repo `git clone git@github.com:vriad/devii.git`\n\n```bash\n#########################################################################################\n#                                                                                       #\n#               ENCRYPTION FOR CLI IN / MACOS / LINUX / WINDOWS                         #\n#                                                                                       #\n#########################################################################################\n\n#encrypt with key & IV but no salt\ncat config.json | openssl aes-256-cbc -iv $(cat iv)  -K $(cat key) -A -nosalt -base64\n\n#decrypt with key IV and base64\necho \"encryptedString\" | openssl aes-256-cbc -d -iv $(cat iv)  -K $(cat key) -base64 -A\n```\n\n## final solution\n\n...\n"}},"__N_SSG":true}